#include <iostream>
#include <queue>

using namespace std;

class Stack {
private:
    queue<int> q1;
    queue<int> q2;

public:
    void push(int value) {
        // Pushing an element onto the stack is done by enqueueing it into one of the queues.
        // We choose q1 for this purpose.
        q1.push(value);
    }

    void pop() {
        if (q1.empty()) {
            cout << "Stack is empty. Cannot pop." << endl;
            return;
        }

        // Move all elements from q1 to q2, except the last element.
        while (q1.size() > 1) {
            q2.push(q1.front());
            q1.pop();
        }

        // Remove the last element from q1 (simulating the pop operation).
        q1.pop();

        // Swap the names of q1 and q2, so q2 is empty and ready for the next push operation.
        swap(q1, q2);
    }

    int top() {
        if (q1.empty()) {
            cout << "Stack is empty." << endl;
            return -1; // Return a sentinel value or throw an exception in a production code
        }

        return q1.front();
    }

    bool empty() {
        return q1.empty();
    }
};

int main() {
    Stack stack;
    stack.push(10);
    stack.push(20);
    stack.push(30);

    cout << "Top of the stack: " << stack.top() << endl;

    stack.pop();
    cout << "Top of the stack after pop: " << stack.top() << endl;

    return 0;
}
